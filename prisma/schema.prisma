// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  username     String  @unique
  password     String
  refreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Game related fields
  gamesPlayed Int @default(0)
  gamesWon    Int @default(0)
  totalScore  Int @default(0)

  // Relations
  rooms      UserRoom[]
  ownedRooms Room[]     @relation("RoomOwner")
}

model Room {
  id         String     @id @default(uuid())
  name       String
  maxPlayers Int        @default(8)
  rounds     Int        @default(8)
  isPrivate  Boolean    @default(false)
  password   String?
  status     RoomStatus @default(WAITING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownerId String
  owner   User       @relation("RoomOwner", fields: [ownerId], references: [id])
  users   UserRoom[]
}

model UserRoom {
  id       String   @id @default(uuid())
  userId   String
  roomId   String
  isReady  Boolean  @default(false)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

enum RoomStatus {
  WAITING
  PLAYING
  FINISHED
}
